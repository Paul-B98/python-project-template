# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Continuous Delivery (Python)
on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    environment: cd-env
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]  # Add more Python versions to test here
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Virtual Environment
      uses: actions/cache@v4
      with:
        path: |
          .venv
          ~/.cache/pip
          ~/.cache/uv
        key: ${{ runner.os }}-venv-${{ hashFiles('uv.lock') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv sync

    - name: Build and publish Package
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
      if: ${{ env.UV_PUBLISH_TOKEN }}
      run: |
        uv version ${{ github.ref_name }}
        uv build
        uv publish

    # Build and push Docker image
    - name: Log in to the Container registry
      uses: docker/login-action@v5
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=pep440,pattern={{version}}

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v3
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true

    # Build and deploy Documentation
    - name: Install doc dependencies
      run: |
        uv install --group docs

    - name: Build and deploy Documentation
      run: |
        uv run mkdocs gh-deploy --force
